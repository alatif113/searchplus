[default]
[Search Inventory - Lookup Gen]
dispatch.earliest_time = -1d
display.general.type = statistics
display.page.search.tab = statistics
request.ui_dispatch_view = search
search = | rest splunk_server=local /servicesNS/-/-/saved/searches\
| eval _time = coalesce(strptime(updated, "%Y-%m-%dT%H:%M:%S%:z"), 0)\
| `sp_field_transforms`\
| `sp_search_decomposition` \
| outputlookup sp_search_inventory \
| stats count
dispatch.latest_time = now
cron_schedule = 13 22 * * *
enableSched = 1

[Search Inventory Iterative - Lookup Gen]
dispatch.earliest_time = -10m@m
dispatch.latest_time = -5m@m
cron_schedule = 2-59/5 * * * *
enableSched = 1
display.general.type = statistics
display.page.search.tab = statistics
request.ui_dispatch_view = search
search = | rest splunk_server=local /servicesNS/-/-/saved/searches \
| eval _time = coalesce(strptime(updated, "%Y-%m-%dT%H:%M:%S%:z"), 0) \
| addinfo \
| where _time >= info_min_time AND _time < info_max_time\
| `sp_field_transforms`\
| `sp_track_changes`\
| `sp_search_decomposition` \
| outputlookup sp_search_inventory append=true\
| stats count

[Search Resource Usage - Lookup Gen]
dispatch.earliest_time = -7d@h
display.general.type = statistics
display.page.search.tab = statistics
request.ui_dispatch_view = search
search = index=_internal sourcetype=scheduler \
| eval latency=dispatch_time - scheduled_time \
| stats count(eval(status=skipped)) as skipped count as total avg(run_time) as run_time avg(result_count) as result_count avg(latency) as latency by savedsearch_name \
| eval skipped=round(skipped / total * 100, 1) \
| fields - total \
| join type=left savedsearch_name \
    [ search index=_audit sourcetype=audittrail search_id=* NOT(user IN (internal_monitoring splunk-system-user admin)) action=search \
    | stats avg(scan_count) as scan_count by savedsearch_name] \
| join type=left savedsearch_name \
    [ search index=_introspection sourcetype=splunk_resource_usage data.search_props.sid::* data.search_props.mode!=RT data.search_props.user!="splunk-system-user" \
    | rename data.search_props.label as savedsearch_name data.mem_used as mem_used \
    | stats avg(mem_used) as mem_used by savedsearch_name] \
| foreach run_time result_count mem_used scan_count latency \
    [ eval <<FIELD>>=round(<<FIELD>>, 0)] \
| eval latency_status = case(isnull(latency) OR latency<60, "green", latency>900, "red", 1=1, "amber") \
| eval skipped_status = case(isnull(skipped) OR skipped=0, "green", skipped>20, "red", 1=1, "amber") \
| eval run_time_status = case(isnull(run_time) OR run_time<300, "green", run_time>1200, "red", 1=1, "amber") \
| eval result_count_status = case(isnull(result_count) OR result_count<10000, "green", result_count>100000, "red", 1=1, "amber") \
| eval scan_count_status = case(isnull(scan_count) OR scan_count<1000000, "green", scan_count>10000000, "red", 1=1, "amber") \
| eval mem_used_status = case(isnull(mem_used) OR mem_used<100, "green", mem_used>1000, "red", 1=1, "amber") \
| eval latency=replace(tostring(latency, "duration"), "0?(\d+):0?(\d+):0?(\d+)", "\1 hrs \2 min \3 sec") \
| eval skipped=skipped." %" \
| eval run_time=replace(tostring(run_time, "duration"), "0?(\d+):0?(\d+):0?(\d+)", "\1 hrs \2 min \3 sec") \
| eval result_count=tostring(result_count, "commas") \
| eval scan_count=tostring(scan_count, "commas") \
| eval mem_used=tostring(mem_used, "commas")." MB" \
| rename savedsearch_name as title \
| outputlookup sp_search_resource_usage.csv \
| stats count
dispatch.latest_time = now
cron_schedule = 13 23 * * *
enableSched = 1

