[sp_search_decomposition]
definition = ```=== Remove comments =====================================================``` \
eval lines = search \
| rex mode=sed field=lines "s/```(.*?)```//g"\
    ```=== Split into lines ====================================================``` \
| eval lines=if(substr(lines, 0, 1) == "|", lines, "search ".lines) \
| eval lines=trim(split(lines, "|")) \
| mvexpand lines \
| search lines!=""\
    ```=== Extract datamodel ==================================================``` \
| rex field=lines "(from|where) datamodel[\s=:]\"?(?<datamodel>\w+)"\
    ```=== Expand datamodel constraints =======================================``` \
| join type=left datamodel \
    [| rest /services/data/models \
    | spath input=eai:data path=objects{}.constraints{}.search output=datamodel_search \
    | table datamodel_search title \
    | rename title as datamodel] \
| eval lines=mvappend(lines, datamodel_search) \
| mvexpand lines \
| fields - datamodel_search\
    ```=== Expand first level macros ===========================================``` \
| rex field=lines max_match=0 "(?<macro_replace>\`(?<macro>[^\(]+)(\((?<arg_value>.*?)\))?\`)" \
| eval arg_value=split(arg_value, ",") \
| eval arg_count=mvcount(arg_value) \
| eval macro=if(arg_count>0, macro."(".arg_count.")", macro) \
| join type=left macro \
    [| rest /servicesNS/-/-/configs/conf-macros \
    | table args definition title \
    | rename title as macro args as arg_field definition as definition_0] \
| eval arg_field=split(arg_field, ",") \
| eval definition_1=if(arg_count>0, replace(definition_0, "\$".mvindex(arg_field,0)."\$", mvindex(arg_value,0)), null()) \
| eval definition_2=if(arg_count>1, replace(definition_1, "\$".mvindex(arg_field,1)."\$", mvindex(arg_value,1)), null()) \
| eval definition_3=if(arg_count>2, replace(definition_2, "\$".mvindex(arg_field,2)."\$", mvindex(arg_value,2)), null()) \
| eval definition_4=if(arg_count>3, replace(definition_3, "\$".mvindex(arg_field,3)."\$", mvindex(arg_value,3)), null()) \
| eval definition_5=if(arg_count>4, replace(definition_4, "\$".mvindex(arg_field,4)."\$", mvindex(arg_value,4)), null()) \
| eval definition=coalesce(definition_5,definition_4,definition_3,definition_2,definition_1,definition_0) \
| rex field=macro_replace mode=sed "s/([^\w+])/\\\\\1/g" \
| eval lines=if(isnotnull(macro_replace), replace(lines, macro_replace, definition), lines) \
| eval lines=trim(split(lines, "|")) \
| mvexpand lines \
| search lines!="" \
| fields - definition_* arg* definition macro_replace\
    ```=== Extract command ====================================================``` \
| rex field=lines "^(?<command>\w+)"\
    ```=== Extract lookups ====================================================``` \
| rex field=lines "^\s*(lookup|inputlookup|outputlookup)\s(append=\w+\s)?(?<lookup>\w+)" \
| rex field=lines max_match=0 "index\s*=\s*(?<index>\w+)" \
    ```=== Extract fields ====================================================``` \
| rex field=lines max_match=0 "\s(?<field_1>\"[^\"]+\"|[a-zA-Z0-9{}_\-\.]+?)\s*(=|<|>|!=)" \
| rex field=lines max_match=0 "\((?<field_2>\"[^\"]+\"|[a-zA-Z0-9{}_\-\.]+)\) [aA][sS] (?<field_3>\"[^\"]+\"|[a-zA-Z0-9{}_\-\.]+)" \
| rex field=lines max_match=0 "\s(?<field_4>\"[^\"]+\"|[a-zA-Z0-9{}_\-\.]+) [aA][sS] (?<field_5>\"[^\"]+\"|[a-zA-Z0-9{}_\-\.]+)" \
| rex field=lines "(by\s+|groupby\s+|table\s+|fields\s+(?!\-))(?<field_6>.*?)($|\])" \
| eval field_6=split(trim(replace(field_6, ",\s*", " ")), " ") \
| eval field=mvappend(field_1, field_2, field_3, field_4, field_5, field_6) \
| fields - field_*\
    ```=== Extract functions ===================================================``` \
| rex field=lines max_match=0 "(?<function>\w+)\(" \
| fields - lines \
| stats max(_time) as _time values(command) as command values(datamodel) as datamodel values(field) as field values(index) as index values(macro) as macro values(lookup) as lookup values(function) as function first(owner) as owner first(earliest) as earliest first(latest) as latest first(cron_schedule) as cron_schedule first(description) as description first(status) as status first(sharing) as sharing first(next_scheduled_time) as next_scheduled_time first(updated) as updated first(correlation_search) as correlation_search values(mtr_tactic) as mtr_tactic values(mtr_technique) as mtr_technique first(severity) as severity first(security_domain) as security_domain first(risk) as risk first(notable) as notable by title search app \
| foreach command datamodel field index macro lookup function mtr_tactic mtr_technique\
    [ eval <<FIELD>>=mvjoin(<<FIELD>>, "|")] \
| eval _key=title

[sp_field_transforms]
definition = spath input=action.correlationsearch.annotations path=mitre_attack{} output="mitre_id" \
| table _time, title, search, "eai:acl.app", "eai:acl.owner", "eai:acl.sharing", updated, "dispatch.earliest_time", "dispatch.latest_time", cron_schedule, sharing, description, disabled, next_scheduled_time, mitre_id, "action.correlationsearch.enabled", "action.notable.param.severity", "action.notable.param.security_domain", "action.notable", "action.risk" \
| rename "eai:acl.app" as app, "eai:acl.owner" as owner, "eai:acl.sharing" as sharing, "dispatch.earliest_time" as earliest, "dispatch.latest_time" as latest, "action.correlationsearch.enabled" as correlation_search, "action.notable.param.severity" as severity, "action.notable.param.security_domain" as security_domain, disabled as status, "action.risk" as risk, "action.notable" as notable\
| lookup sp_mitre_enrichment.csv mitre_id output tactics as mtr_tactic technique mitre_id as technique_id\
| eval mtr_technique=mvzip(mvmap(technique_id, "[".technique_id."]"), technique, " ") \
| fields - technique, mitre_id, technique_id \
| eval status=if((status == 1),"disabled","enabled") \
| foreach risk notable correlation_search \
    [ eval <<FIELD>>=if(<<FIELD>>=1, "yes", "no") ]
iseval = 0

[sp_history_index]
definition = index=main
iseval = 0

[sp_track_changes]
definition = lookup sp_search_inventory title OUTPUT search as prev_search app as prev_app updated as prev_updated owner as prev_owner earliest as prev_earliest latest as prev_latest cron_schedule as prev_cron_schedule description as prev_description status as prev_status sharing as prev_sharing correlation_search as prev_correlation_search mtr_tactic as prev_mtr_tactic mtr_technique as prev_mtr_technique severity as prev_severity security_domain as prev_security_domain risk as prev_risk notable as prev_notable\
| foreach search app owner earliest latest cron_schedule description status sharing correlation_search mtr_tactic mtr_technique severity security_domain risk notable \
    [ eval changed=coalesce(changed, if(<<FIELD>>==prev_<<FIELD>>, null(), 1))] \
| search changed=1\
| fields - changed\
| collect `sp_history_index` `sp_disable_change_history` source="sp_change_history"\
| fields - prev_*
iseval = 0

[sp_disable_change_history]
definition = testmode=false
iseval = 0


